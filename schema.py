# schema.py
from sqlalchemy import create_engine, MetaData, Column, Integer, String, Date, DateTime, ForeignKey, text
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.sql import func
from sqlalchemy.dialects.postgresql import ENUM
from sqlalchemy.schema import CreateTable, DDLElement
from sqlalchemy.ext.compiler import compiles
from sqlalchemy.orm import sessionmaker
from datetime import datetime

Base = declarative_base()

# Custom Type 1: CarnetType (format A-XXXX-YYYY)
class CarnetType(String):
    def __init__(self):
        super().__init__(10)

# Custom Type 2: EstadoInscripcionType (ENUM)
class EstadoInscripcionType(ENUM):
    def __init__(self):
        super().__init__('activo', 'inactivo', name='estado_inscripcion')

# Model definitions
class Estudiante(Base):
    __tablename__ = 'estudiantes'
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    nombre = Column(String(100), nullable=False)
    email = Column(String(100), nullable=False, unique=True)
    fecha_nacimiento = Column(Date, nullable=False)
    carnet = Column(CarnetType(), nullable=False, unique=True)
    created_at = Column(DateTime, server_default=func.now())

class Curso(Base):
    __tablename__ = 'cursos'
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    nombre = Column(String(100), nullable=False)
    codigo = Column(String(20), nullable=False, unique=True)
    horario = Column(String(50), nullable=False)
    aula = Column(String(10), nullable=False)
    created_at = Column(DateTime, server_default=func.now())

class Inscripcion(Base):
    __tablename__ = 'inscripciones'
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    estudiante_id = Column(Integer, ForeignKey('estudiantes.id', ondelete='CASCADE'), nullable=False)
    curso_id = Column(Integer, ForeignKey('cursos.id', ondelete='CASCADE'), nullable=False)
    fecha_inscripcion = Column(DateTime, server_default=func.now())
    estado = Column(EstadoInscripcionType(), nullable=False)

# Custom DDL for view
class CreateView(DDLElement):
    def __init__(self, name, selectable):
        self.name = name
        self.selectable = selectable

@compiles(CreateView)
def _create_view(element, compiler, **kw):
    return "CREATE OR REPLACE VIEW %s AS %s" % (
        element.name,
        compiler.sql_compiler.process(element.selectable)
    )

def generate_schema(engine_url='postgresql://user:password@localhost/dbname'):
    engine = create_engine(engine_url)
    metadata = Base.metadata
    
    # Generate DDL
    ddl_statements = []
    
    # Add custom types first
    ddl_statements.append("""
    CREATE TYPE estado_inscripcion AS ENUM ('activo', 'inactivo');
    """)
    
    # Add tables
    for table in metadata.sorted_tables:
        ddl_statements.append(str(CreateTable(table).compile(engine)))
    
    # Add view
    view_sql = """
    CREATE OR REPLACE VIEW vista_estudiantes_cursos AS
    SELECT 
        e.nombre AS estudiante,
        e.carnet,
        c.nombre AS curso,
        c.codigo,
        i.fecha_inscripcion,
        i.estado
    FROM inscripciones i
    JOIN estudiantes e ON i.estudiante_id = e.id
    JOIN cursos c ON i.curso_id = c.id;
    """
    ddl_statements.append(view_sql)
    
    # Add constraints
    ddl_statements.append("""
    ALTER TABLE estudiantes
    ADD CONSTRAINT chk_carnet_format 
    CHECK (carnet ~ '^A-\\d{4}-\\d{4}$');
    """)
    
    ddl_statements.append("""
    ALTER TABLE estudiantes
    ADD CONSTRAINT chk_edad_minima
    CHECK (fecha_nacimiento <= CURRENT_DATE - INTERVAL '16 years');
    """)
    
    # Write to schema.sql
    with open('schema.sql', 'w', encoding='utf-8') as f:
        f.write("-- Generated by SQLAlchemy on {}\n\n".format(datetime.now()))
        f.write("\n\n".join(ddl_statements))
    
    print("Schema generated successfully in schema.sql")
